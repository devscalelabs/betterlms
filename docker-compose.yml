version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: better-openlms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: better_openlms
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - better-openlms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: better-openlms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - better-openlms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Database Migration Service
  db-migrate:
    build:
      context: .
      dockerfile: packages/database/Dockerfile
    container_name: better-openlms-db-migrate
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/better_openlms
      - SEED_DATABASE=false
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - better-openlms-network
    restart: "no"

  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: better-openlms-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/better_openlms
      - REDIS_URL=redis://redis:6379
      - BACKEND_PORT=8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - better-openlms-network
    healthcheck:
      test: ["CMD", "bun", "run", "--silent", "-e", "fetch('http://localhost:8000/').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    container_name: better-openlms-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/better_openlms
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - better-openlms-network

  # Admin Frontend
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    container_name: better-openlms-admin
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - better-openlms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Platform Frontend
  platform:
    build:
      context: .
      dockerfile: apps/platform/Dockerfile
    container_name: better-openlms-platform
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - better-openlms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  better-openlms-network:
    driver: bridge
